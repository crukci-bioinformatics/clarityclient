<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
    CRUK-CI Genologics REST API Java Client.
    Copyright (C) 2013 Cancer Research UK Cambridge Institute.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:oxm="http://www.springframework.org/schema/oxm"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-4.3.xsd
                           http://www.springframework.org/schema/util
                           http://www.springframework.org/schema/util/spring-util-4.3.xsd
                           http://www.springframework.org/schema/oxm
                           http://www.springframework.org/schema/oxm/spring-oxm-4.3.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

    <!--
        Take care not to include a bean of type
        org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator

        This creates JDK proxies around the CGLIB proxies needed for the Jaxb2Marshaller,
        which then cannot be set as they aren't actually a type of Jaxb2Marshaller.

        This took two days to find but five seconds to fix.

        The error one sees is:

        java.lang.IllegalStateException: Cannot convert value of type [com.sun.proxy.$Proxy implementing ...]
        to required type [org.springframework.oxm.jaxb.Jaxb2Marshaller] for property 'jaxbMarshaller':
        no matching editors or conversion strategy found
     -->

    <context:annotation-config />

    <context:property-placeholder location="classpath:/org/cruk/genologics/api/genologics-client-http.properties" ignore-unresolvable="true" />

    <bean id="filestoreSFTPSessionFactory" class="org.springframework.integration.sftp.session.DefaultSftpSessionFactory" scope="prototype">
        <property name="allowUnknownKeys" value="true"/>
        <property name="sessionConfig">
            <!-- Note: this set up required to stop the Kerberos user name prompts in Java 7. -->
            <props>
                <prop key="PreferredAuthentications">publickey,password</prop>

                <!-- May want this turned on if you are being particularly security conscious. -->
                <!-- Can cause issues if host keys change, so by default it's turned off.      -->
                <prop key="StrictHostKeyChecking">no</prop>
            </props>
        </property>
    </bean>

    <bean id="genologicsRequestConfigBuilder" class="org.apache.http.client.config.RequestConfig" factory-method="custom">
        <property name="connectTimeout" value="${http.connect.timeout}" />
        <property name="socketTimeout" value="${http.socket.timeout}" />

        <property name="authenticationEnabled" value="true"/>
        <property name="redirectsEnabled" value="true"/>
        <property name="relativeRedirectsAllowed" value="true"/>

        <!-- Note that the XML is not compressed, and the downloads should fetch without decompressing. -->
        <property name="contentCompressionEnabled" value="false"/>

        <property name="targetPreferredAuthSchemes">
            <set>
                <value>Basic</value>
            </set>
        </property>
    </bean>

    <bean id="genologicsRequestConfig" factory-bean="genologicsRequestConfigBuilder" factory-method="build" />

    <bean id="genologicsHttpClientBuilder" class="org.apache.http.impl.client.HttpClientBuilder" factory-method="create">
        <property name="defaultRequestConfig" ref="genologicsRequestConfig" />
    </bean>

    <bean id="genologicsHttpClient" factory-bean="genologicsHttpClientBuilder" factory-method="build" />

    <bean id="genologicsCredentialsProvider" class="org.apache.http.impl.client.BasicCredentialsProvider" />

    <bean id="genologicsClientHttpRequestFactory" class="org.cruk.genologics.api.http.HttpComponentsClientHttpRequestFactoryBasicAuth">
        <constructor-arg ref="genologicsHttpClient"/>
        <property name="credentialsProvider" ref="genologicsCredentialsProvider"/>
        <property name="bufferRequestBody" value="true"/>
    </bean>

    <bean name="genologicsHttpClientTimingAspect" class="org.cruk.genologics.api.debugging.HttpClientTimingAspect"/>

    <aop:config>
        <aop:aspect ref="genologicsHttpClientTimingAspect">
            <aop:around
                pointcut="execution(public * execute(..)) and bean(genologicsHttpClient)"
                method="timeCall"/>
        </aop:aspect>
    </aop:config>


    <bean id="genologicsNamespaceMatcher" class="org.cruk.genologics.api.jaxb.KnownNamespacePrefixMatcher"/>

    <util:list id="genologicsModelPackages">
        <value>com.genologics.ri</value>
        <value>com.genologics.ri.artifact</value>
        <value>com.genologics.ri.artifactgroup</value>
        <value>com.genologics.ri.configuration</value>
        <value>com.genologics.ri.container</value>
        <value>com.genologics.ri.containertype</value>
        <value>com.genologics.ri.controltype</value>
        <value>com.genologics.ri.exception</value>
        <value>com.genologics.ri.file</value>
        <value>com.genologics.ri.instrument</value>
        <value>com.genologics.ri.instrumenttype</value>
        <value>com.genologics.ri.lab</value>
        <value>com.genologics.ri.process</value>
        <value>com.genologics.ri.processtemplate</value>
        <value>com.genologics.ri.processtype</value>
        <value>com.genologics.ri.project</value>
        <value>com.genologics.ri.property</value>
        <value>com.genologics.ri.protocolconfiguration</value>
        <value>com.genologics.ri.reagentkit</value>
        <value>com.genologics.ri.reagentlot</value>
        <value>com.genologics.ri.reagenttype</value>
        <value>com.genologics.ri.researcher</value>
        <value>com.genologics.ri.routing</value>
        <value>com.genologics.ri.sample</value>
        <value>com.genologics.ri.stage</value>
        <value>com.genologics.ri.step</value>
        <value>com.genologics.ri.stepconfiguration</value>
        <value>com.genologics.ri.userdefined</value>
        <value>com.genologics.ri.version</value>
        <value>com.genologics.ri.workflowconfiguration</value>
    </util:list>

    <util:map id="genologicsJaxbMarshallerProperties">
        <entry>
            <key><util:constant static-field="javax.xml.bind.Marshaller.JAXB_FORMATTED_OUTPUT"/></key>
            <value type="java.lang.Boolean">true</value>
        </entry>
        <entry>
            <key><util:constant static-field="javax.xml.bind.Marshaller.JAXB_ENCODING"/></key>
            <value>UTF-8</value>
        </entry>
        <entry key="com.sun.xml.bind.namespacePrefixMapper" value-ref="genologicsNamespaceMatcher"/>
    </util:map>

    <bean id="genologicsJaxbMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name="packagesToScan" ref="genologicsModelPackages"/>
        <property name="marshallerProperties" ref="genologicsJaxbMarshallerProperties"/>
    </bean>

    <bean name="genologicsMarshallingTool" class="org.cruk.genologics.api.jaxb.JaxbMarshallingTool">
        <property name="marshaller" ref="genologicsJaxbMarshaller"/>
    </bean>

    <bean name="genologicsUnmarshallingAspect" class="org.cruk.genologics.api.jaxb.JaxbUnmarshallingAspect"/>

    <aop:config proxy-target-class="true">
        <aop:aspect ref="genologicsUnmarshallingAspect">
            <aop:around
                pointcut="execution(public * unmarshal(..)) and bean(genologicsJaxbMarshaller)"
                method="objectUnmarshalled"/>
        </aop:aspect>
    </aop:config>


    <bean id="genologicsJaxbMessageConverter" class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
        <constructor-arg ref="genologicsJaxbMarshaller"/>
    </bean>

    <bean id="genologicsExceptionErrorHandler" class="org.cruk.genologics.api.http.GenologicsFailureResponseErrorHandler">
        <property name="marshaller" ref="genologicsJaxbMarshaller"/>
    </bean>

    <bean id="genologicsRestTemplate" class="org.springframework.web.client.RestTemplate">
        <constructor-arg ref="genologicsClientHttpRequestFactory"/>
        <property name="messageConverters">
            <list>
                <ref bean="genologicsJaxbMessageConverter"/>
            </list>
        </property>
        <property name="errorHandler" ref="genologicsExceptionErrorHandler"/>
    </bean>

    <bean name="genologicsRestClientSnoopingAspect" class="org.cruk.genologics.api.debugging.RestClientSnoopingAspect">
        <property name="marshaller" ref="genologicsMarshallingTool"/>
    </bean>

    <aop:config>
        <aop:aspect ref="genologicsRestClientSnoopingAspect">
            <aop:around
                pointcut="execution(public * get*(..)) and bean(genologicsRestTemplate)"
                method="checkGet"/>
            <aop:around
                pointcut="execution(public * put*(..)) and bean(genologicsRestTemplate)"
                method="checkPutOrPost"/>
            <aop:around
                pointcut="execution(public * post*(..)) and bean(genologicsRestTemplate)"
                method="checkPutOrPost"/>
            <aop:around
                pointcut="execution(public * exchange*(..)) and bean(genologicsRestTemplate)"
                method="checkExchange"/>
            <aop:around
                pointcut="execution(public * delete*(..)) and bean(genologicsRestTemplate)"
                method="checkDelete"/>
        </aop:aspect>
    </aop:config>

    <bean id="genologicsFileUploadMessageConverter" class="org.springframework.http.converter.FormHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <util:constant static-field="org.springframework.http.MediaType.MULTIPART_FORM_DATA"/>
            </list>
        </property>
    </bean>

    <bean id="genologicsFileUploadTemplate" class="org.springframework.web.client.RestTemplate">
        <constructor-arg ref="genologicsClientHttpRequestFactory"/>
        <property name="messageConverters">
            <list>
                <ref bean="genologicsFileUploadMessageConverter"/>
            </list>
        </property>
        <property name="errorHandler" ref="genologicsExceptionErrorHandler"/>
    </bean>

    <!--
        Base definition for the API bean. Allows the concrete beans, usually called
        "genologicsAPI", to inherit from this and only specify changed properties.
    -->
    <bean id="genologicsAPIBase" class="org.cruk.genologics.api.impl.GenologicsAPIImpl" abstract="true">
        <property name="filestoreSessionFactory" ref="filestoreSFTPSessionFactory"/>
        <property name="jaxbMarshaller" ref="genologicsJaxbMarshaller"/>
        <property name="httpRequestFactory" ref="genologicsClientHttpRequestFactory"/>
        <property name="restClient" ref="genologicsRestTemplate"/>
        <property name="httpClient" ref="genologicsHttpClient"/>
        <property name="fileUploadClient" ref="genologicsFileUploadTemplate"/>
    </bean>

    <!--
        Concrete API bean. This definition can be overwritten if necessary, for example
        to provide a configuration at construction.
    -->
    <bean id="genologicsAPI" parent="genologicsAPIBase"/>

    <bean id="genologicsLatestVersionsResetAspect" class="org.cruk.genologics.api.impl.LatestVersionsResetAspect">
        <property name="genologicsAPI" ref="genologicsAPI"/>
    </bean>

    <aop:config>
        <aop:aspect id="genologicsLatestVersionsResettingAspect" ref="genologicsLatestVersionsResetAspect">
            <aop:after method="cancelStatefulOverride" pointcut="execution(public * *(..)) and bean(genologicsAPI)"/>
        </aop:aspect>
    </aop:config>

</beans>
